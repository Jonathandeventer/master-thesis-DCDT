{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"parser dblp","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"JiiQv623ornw","colab_type":"code","outputId":"097e3d04-4cbc-49c6-e77d-5561b38f2762","executionInfo":{"status":"ok","timestamp":1557305615091,"user_tz":-120,"elapsed":26172,"user":{"displayName":"Jonathan De Venter","photoUrl":"","userId":"06231810016111021151"}},"colab":{"base_uri":"https://localhost:8080/","height":122}},"source":["from google.colab import drive\n","drive.mount('/content/gdrive')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&scope=email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdocs.test%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fdrive.photos.readonly%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fpeopleapi.readonly&response_type=code\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/gdrive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"3FXXZycrrZnI","colab_type":"code","colab":{}},"source":["datapath =  \"gdrive/My Drive/data/test/dblp_coauthorship.json\""],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"E2qsBtQ4rmpV","colab_type":"code","outputId":"f7320c3e-d5e0-4a0a-f463-25bbf6ce1265","executionInfo":{"status":"ok","timestamp":1557399202433,"user_tz":-120,"elapsed":22941,"user":{"displayName":"Jonathan De Venter","photoUrl":"","userId":"06231810016111021151"}},"colab":{"base_uri":"https://localhost:8080/","height":105}},"source":["import os\n","import json\n","\n","\n","with open(datapath) as json_file:  \n","    data = json.load(json_file)\n","    print(data[:100])\n","    \n","    \n","dataset_string = json.dumps(datapath)\n","print(dataset_string)\n","dataset = json.loads(dataset_string)\n","\n","print (dataset)\n","print(os.getcwd())"],"execution_count":2,"outputs":[{"output_type":"stream","text":["[['Alin Deutsch', 'Mary F. Fernandez', 1998], ['Alin Deutsch', 'Daniela Florescu', 1998], ['Alin Deutsch', 'Alon Y. Levy', 1998], ['Alin Deutsch', 'Dan Suciu', 1998], ['Mary F. Fernandez', 'Daniela Florescu', 1998], ['Mary F. Fernandez', 'Alon Y. Levy', 1998], ['Mary F. Fernandez', 'Dan Suciu', 1998], ['Daniela Florescu', 'Alon Y. Levy', 1998], ['Daniela Florescu', 'Dan Suciu', 1998], ['Alon Y. Levy', 'Dan Suciu', 1998], ['Roy T. Fielding', 'Henrik Frystyk Nielsen', 1999], ['Roy T. Fielding', 'Tim Berners-Lee', 1999], ['Henrik Frystyk Nielsen', 'Tim Berners-Lee', 1999], ['André Berton', 'Alfred Kaltenmeier', 2006], ['André Berton', 'Udo Haiber', 2006], ['André Berton', 'Olaf Schreiner', 2006], ['Alfred Kaltenmeier', 'Udo Haiber', 2006], ['Alfred Kaltenmeier', 'Olaf Schreiner', 2006], ['Udo Haiber', 'Olaf Schreiner', 2006], ['Pádraig Cunningham', 'Matthieu Cord', 2008], ['Pádraig Cunningham', 'Sarah Jane Delany', 2008], ['Matthieu Cord', 'Sarah Jane Delany', 2008], ['Axel Horndasch', 'Horst Rapp', 2006], ['Axel Horndasch', 'Hans Röttger', 2006], ['Horst Rapp', 'Hans Röttger', 2006], ['Hubert D. Zimmer', 'Stefan Münzer', 2011], ['Hubert D. Zimmer', 'Katja Umla-Runge', 2011], ['Stefan Münzer', 'Katja Umla-Runge', 2011], ['Marshall R. Mayberry', 'Matthew W. Crocker', 2011], ['Hubert D. Zimmer', 'Stefan Münzer', 2011], ['Hubert D. Zimmer', 'Jörg Baus', 2011], ['Stefan Münzer', 'Jörg Baus', 2011], ['Jörg Neidig', 'Jörg Preißinger', 2013], ['Boris Brandherm', 'Michael Schmitz', 2013], ['Boris Brandherm', 'Robert Neßelrath', 2013], ['Boris Brandherm', 'Frank Lehmann', 2013], ['Michael Schmitz', 'Robert Neßelrath', 2013], ['Michael Schmitz', 'Frank Lehmann', 2013], ['Robert Neßelrath', 'Frank Lehmann', 2013], ['Jan Alexandersson', 'Norbert Pfleger', 2006], ['André Berton', 'Dirk Bühler', 2006], ['André Berton', 'Wolfgang Minker', 2006], ['Dirk Bühler', 'Wolfgang Minker', 2006], ['Stephan Grashey', 'Matthias Schuster', 2006], ['Johannes Fürnkranz', 'Dragan Gamberger', 2012], ['Johannes Fürnkranz', 'Nada Lavrac', 2012], ['Dragan Gamberger', 'Nada Lavrac', 2012], ['Thomas Rist', 'Elisabeth André', 2004], ['Thomas Rist', 'Stephan Baldes', 2004], ['Thomas Rist', 'Patrick Gebhard', 2004], ['Thomas Rist', 'Martin Klesen', 2004], ['Thomas Rist', 'Michael Kipp', 2004], ['Thomas Rist', 'Peter Rist', 2004], ['Thomas Rist', 'Markus Schmitt 0002', 2004], ['Elisabeth André', 'Stephan Baldes', 2004], ['Elisabeth André', 'Patrick Gebhard', 2004], ['Elisabeth André', 'Martin Klesen', 2004], ['Elisabeth André', 'Michael Kipp', 2004], ['Elisabeth André', 'Peter Rist', 2004], ['Elisabeth André', 'Markus Schmitt 0002', 2004], ['Stephan Baldes', 'Patrick Gebhard', 2004], ['Stephan Baldes', 'Martin Klesen', 2004], ['Stephan Baldes', 'Michael Kipp', 2004], ['Stephan Baldes', 'Peter Rist', 2004], ['Stephan Baldes', 'Markus Schmitt 0002', 2004], ['Patrick Gebhard', 'Martin Klesen', 2004], ['Patrick Gebhard', 'Michael Kipp', 2004], ['Patrick Gebhard', 'Peter Rist', 2004], ['Patrick Gebhard', 'Markus Schmitt 0002', 2004], ['Martin Klesen', 'Michael Kipp', 2004], ['Martin Klesen', 'Peter Rist', 2004], ['Martin Klesen', 'Markus Schmitt 0002', 2004], ['Michael Kipp', 'Peter Rist', 2004], ['Michael Kipp', 'Markus Schmitt 0002', 2004], ['Peter Rist', 'Markus Schmitt 0002', 2004], ['Yue Suo', 'Yuanchun Shi', 2011], ['Yue Suo', 'Toru Ishida', 2011], ['Yuanchun Shi', 'Toru Ishida', 2011], ['Daisuke Morita', 'Toru Ishida', 2011], ['Roberto Valenti', 'Nicu Sebe', 2008], ['Roberto Valenti', 'Theo Gevers', 2008], ['Roberto Valenti', 'Ira Cohen', 2008], ['Nicu Sebe', 'Theo Gevers', 2008], ['Nicu Sebe', 'Ira Cohen', 2008], ['Theo Gevers', 'Ira Cohen', 2008], ['Noam Tractinsky', 'Eleanor Eytam', 2012], ['Jörg Müller', 'Keith Cheverst', 2012], ['Christoph Benzmüller', 'Marvin Schiller', 2011], ['Christoph Benzmüller', 'Jörg H. Siekmann', 2011], ['Marvin Schiller', 'Jörg H. Siekmann', 2011], ['Andrew Marriott', 'Simon Beard', 2004], ['Fiorella de Rosis', 'Berardina De Carolis', 2004], ['Fiorella de Rosis', 'Valeria Carofiglio', 2004], ['Fiorella de Rosis', 'Sebastiano Pizzutilo', 2004], ['Berardina De Carolis', 'Valeria Carofiglio', 2004], ['Berardina De Carolis', 'Sebastiano Pizzutilo', 2004], ['Valeria Carofiglio', 'Sebastiano Pizzutilo', 2004], ['Jörg Neidig', 'Thomas Grosch', 2013], ['Jörg Neidig', 'Ulrike Heim', 2013], ['Thomas Grosch', 'Ulrike Heim', 2013]]\n","\"gdrive/My Drive/data/test/dblp_coauthorship.json\"\n","gdrive/My Drive/data/test/dblp_coauthorship.json\n","/content\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"iJYCO4Jyu-1w","colab_type":"code","colab":{}},"source":["\n","\n","nodes = set()\n","index = dict()\n","\n","dflist = []\n","teller = 0\n","\n","count = 0\n","for el in data:\n","    id1, id2, timestamp = el\n","\n","    # als het nog geen toegewezen id heeft, maak er dan een aan, \n","\n","\n","    if id1 not in nodes:\n","        nodes.add(id1)\n","        index[id1] = count\n","        count +=1\n","\n","\n","    if id2 not in nodes:\n","        nodes.add(id2)\n","        index[id2] = count\n","        count +=1\n","\n","    #print([index[id1], index[id2],int(timestamp)])\n","    if timestamp == None:\n","        teller +=1\n","        #print (\"weird\" , timestamp, \"id1:\", id1, \"id1:\", id2, count, el, len(el))\n","        continue\n","    dflist.append([index[id1], index[id2],int(timestamp)])\n","\n","    \n","    #print(dflist)\n","    #anders zoek id, voegtoe\n","#print(\"count:\" , count, teller)    \n","import pandas as pd        \n","        \n","df = pd.DataFrame(data=dflist)\n","\n","\n","#df.columns=df.columns.str.strip()\n","#df.summary()\n","df = df.sort_values(2, axis=0, ascending=True)\n","print (df)\n","#df.to_csv(\"gdrive/My Drive/data/test/edgestream_sorted.txt\", sep=\"\\t\", header=False, index =False)\n","        \n","    \n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"WFEm5MaFT5Cz","colab_type":"code","colab":{}},"source":["values = set(df[2])\n","values = list(values)\n","print(values)\n","\n","\n","for val in values:\n","    print(df[df[2]==val])\n","\n","    df.to_csv(\"gdrive/My Drive/data/test/graph-\"+str(val)+\".txt\", sep=\"\\t\", header=False, index =False)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5QcmyAQ1gUxa","colab_type":"code","colab":{}},"source":["df[2].value_counts().to_csv(\"gdrive/My Drive/data/test/occurences.txt\", sep=\"\\t\", header=False)"],"execution_count":0,"outputs":[]}]}